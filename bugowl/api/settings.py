"""
Django settings for bugowl_websocket project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

print('settings started')
load_dotenv()
print(os.getenv('DJANGO_SETTINGS_MODULE'))
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your-secret-key')
AGENT_SERVER_SECRET_KEY = os.getenv('AGENT_SERVER_SECRET_KEY', 'your-agent-server-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'


ENVIRONMENT = os.getenv('ENVIRONMENT', 'LOCAL')
print(f'Environment: {ENVIRONMENT}')
ENV = ENVIRONMENT

LOGGER = ENVIRONMENT
if 'LOCAL' in ENVIRONMENT:
	DEBUG = True

DJANGO_SUPER_USER = os.getenv('DJANGO_SUPER_USER', 'admin')
DJANGO_SUPER_USER_PASSWORD = os.getenv('DJANGO_SUPER_USER_PASSWORD', 'admin')
DJANGO_SUPER_USER_EMAIL = os.getenv('DJANGO_SUPER_USER_EMAIL', 'bugowl.qa@gmail.com')


ALLOWED_HOSTS = [
	'bugowl.ai',
	'stg.bugowl.ai',
	'turtledove.in',
	'helpchat.co.in',
	'helpchat.in',
	'helpmates.co',
	'127.0.0.1',
	'localhost',
	'0.0.0.0',
	'helpchat.social',
	'stg.helpchat.social',
	'13.233.47.250',
	'stg.bugowl.helpchat.social',
	'stg-bugowl.vercel.app',
	'api',
	'api-agent',
]


ALLOWED_ORIGINS = [
	'https://stg.bugowl.helpchat.social',
	'https://bugowl.helpchat.social',
	'http://localhost:8010',
	'http://127.0.0.1:8010',
	'https://bugowl.ai',
	'https://stg.bugowl.ai',
	'http://localhost:3000',
	'https://v0-bug-owl.vercel.app',
	'https://stg-bugowl.vercel.app',
]

CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS


# CORS settings
CORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
	'DELETE',
	'GET',
	'OPTIONS',
	'PATCH',
	'POST',
	'PUT',
]
CORS_ALLOW_HEADERS = [
	'accept',
	'accept-encoding',
	'authorization',
	'content-type',
	'dnt',
	'origin',
	'user-agent',
	'x-csrftoken',
	'x-requested-with',
]


# Application definition

INSTALLED_APPS = [
	'rest_framework',
	'rest_framework.authtoken',
	'jazzmin',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'corsheaders',
	'channels',
	'websocket',
	'api',
	'bugowl',
	'job',
	'testcase',
	'teststep',
	'testask',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'whitenoise.middleware.WhiteNoiseMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]


ASGI_APPLICATION = 'api.asgi.application'

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


if 'LOCAL' in ENVIRONMENT.upper():
	DATABASES = {
		'default': {
			'ENGINE': 'django.db.backends.sqlite3',
			'NAME': BASE_DIR / 'db.sqlite3',
		}
	}
else:
	DATABASES = {
		'default': {
			'ENGINE': os.getenv('BUGOWL_AGENT_DATABASE_ENGINE'),
			'NAME': os.getenv('BUGOWL_AGENT_DATABASE_NAME'),
			'USER': os.getenv('BUGOWL_AGENT_DATABASE_USER'),
			'PASSWORD': os.getenv('BUGOWL_AGENT_DATABASE_PASSWORD'),
			'HOST': os.getenv('BUGOWL_AGENT_DATABASE_HOST'),
			'PORT': os.getenv('BUGOWL_AGENT_DATABASE_PORT'),
			'CONN_MAX_AGE': 300,  # Keep connections open for 10 minutes
		}
	}

print(f'Using database: {DATABASES["default"]["ENGINE"]}')


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': [
		'api.authentication.JWTAuthentication',  # Custom JWT authentication
	],
	'DEFAULT_PERMISSION_CLASSES': [
		'rest_framework.permissions.IsAuthenticated',
	],
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Whitenoise configuration
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True
WHITENOISE_MIMETYPES = {
	'.js': 'application/javascript',
	'.css': 'text/css',
	'.html': 'text/html',
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Import Jazzmin configuration from separate file
# Django automatically reads JAZZMIN_SETTINGS and JAZZMIN_UI_TWEAKS from module namespace
from .jazzmin_config import JAZZMIN_SETTINGS, JAZZMIN_UI_TWEAKS  # noqa: F401

CACHES = {
	'default': {
		'TIMEOUT': 315567360,  # 10 years, no timeout by default.
		'BACKEND': 'django_redis.cache.RedisCache',
		'LOCATION': os.getenv('DJANGO_CACHE_LOCATION'),
		'OPTIONS': {
			'CLIENT_CLASS': 'django_redis.client.DefaultClient',
			'password': os.getenv('REDIS_AUTH_TOKEN', None),
		},
	}
}


LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': '%(asctime)s [%(levelname)s] %(pathname)s:%(lineno)d - %(funcName)s: %(message)s',
			'style': '%',
		},
		'colored': {
			'()': 'coloredlogs.ColoredFormatter',
			'format': '%(asctime)s [%(levelname)s] %(pathname)s:%(lineno)d - %(funcName)s: %(message)s',
			'level_styles': {
				'debug': {'color': 'cyan'},
				'info': {'color': 'green'},
				'warning': {'color': 'yellow'},
				'error': {'color': 'red'},
				'critical': {'color': 'red', 'bold': True},
			},
			'field_styles': {
				'asctime': {'color': 'white'},
				'levelname': {'color': 'white', 'bold': True},
				'pathname': {'color': 'blue'},
				'lineno': {'color': 'blue'},
				'funcName': {'color': 'blue'},
			},
		},
		'slack': {
			'format': '%(asctime)s [%(levelname)s] %(pathname)s:%(lineno)d - %(funcName)s:\n%(message)s',
			'style': '%',
		},
	},
	'handlers': {
		'file': {
			'level': 'DEBUG',
			'class': 'logging.FileHandler',
			'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),  # /logs/django.log
			'formatter': 'verbose',
		},
		'console': {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
			'formatter': 'colored',
		},
		'slack': {
			'level': 'ERROR',
			'class': 'api.slack_logging.SlackHandler',
			'formatter': 'slack',
			'webhook_url': os.getenv('SLACK_WEBHOOK_URL'),
			'channel': os.getenv('SLACK_CHANNEL'),
			'username': os.getenv('SLACK_USERNAME'),
			'icon_emoji': os.getenv('SLACK_ICON_EMOJI'),
		},
	},
	'loggers': {
		'LOCAL': {
			'handlers': ['file', 'console'],
			'level': 'INFO',
			'propagate': True,
		},
		'STG': {
			'handlers': ['file', 'console', 'slack'],
			'level': 'DEBUG',
			'propagate': True,
		},
		'PROD': {
			'handlers': ['file', 'console', 'slack'],
			'level': 'DEBUG',
			'propagate': True,
		},
	},
}


BROKER_TRANSPORT = 'redis'
BROKER_URL = os.getenv('BROKER_URL', 'redis://redis-agent:6381/0')

ELASTICACHE_HOST = os.getenv('ELASTICACHE_HOST', 'redis-agent')


CELERY_BROKER_URL = BROKER_URL
CELERY_RESULT_BACKEND = BROKER_URL
DJANGO_CACHE_LOCATION = os.getenv('DJANGO_CACHE_LOCATION', 'redis://redis-agent:6381/1')
REDIS_AUTH_TOKEN = ''

# Have to do this because /agent/sys/bop gets redirected to /sys/bop otherwise. nginx sends /agent/sys/bop to the api server but django redirects after login to /sys/bop
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
